{"filter":false,"title":"some.py","tooltip":"/lam1/some.py","undoManager":{"mark":26,"position":26,"stack":[[{"start":{"row":0,"column":0},"end":{"row":101,"column":0},"action":"insert","lines":["import json","import os","import pymysql","import logging","import sys","from datetime import datetime","import boto3","import base64","from botocore.exceptions import ClientError","","","","def get_secret():","    get_secret_value_response=dict","    secret_name = os.environ['SECRETS_DB']","    region_name = \"us-east-1\"","","    # Create a Secrets Manager client","    session = boto3.session.Session()","    client = session.client(","        service_name='secretsmanager',","        region_name=region_name,","        endpoint_url='https://secretsmanager.us-east-1.amazonaws.com'","    )","    try:","        get_secret_value_response = client.get_secret_value(SecretId=secret_name)","    except ClientError as e:","        if e.response['Error']['Code'] == 'DecryptionFailureException':","            raise e","        elif e.response['Error']['Code'] == 'InternalServiceErrorException':","            raise e","        elif e.response['Error']['Code'] == 'InvalidParameterException':","            raise e","        elif e.response['Error']['Code'] == 'InvalidRequestException':","            raise e","        elif e.response['Error']['Code'] == 'ResourceNotFoundException':","            raise e","    '''else:","        if 'SecretString' in get_secret_value_response:","            secret = get_secret_value_response['SecretString']","        else:","            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])'''","    return(get_secret_value_response)       ","            ","","secret_1=get_secret()","print(secret_1[\"SecretString\"])","cred=dict(eval(secret_1['SecretString']))","rds_host  = cred[\"host\"]","name = cred[\"username\"]","password = cred[\"password\"]","","","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","try:","    conn = pymysql.connect(host=rds_host,user=name,password=password,database=None)","except pymysql.MySQLError as e:","    logger.error(\"ERROR: Unexpected error: Could not connect to MySQL instance.\")","    logger.error(e)","    sys.exit()","    ","logger.info(\"SUCCESS: Connection to RDS MySQL instance succeeded\")","def lambda_handler(event, context):","    body=eval(event['body'])","    ","    required_fields = [\"id\",\"usageTypeId\",\"instanceId\",\"amount\",\"fetchTime\",\"testData\"]","    for field in required_fields:","        if field not in body:","            raise KeyError(\"%s key is missing from secret JSON\" % field)","        ","    with conn.cursor() as cur:","        sql =\"select * from billing.instance where id='%s'\"","        cur.execute(sql %body['instanceId'])","        result_instance=cur.fetchone()","        print(result_instance)","    conn.commit()","    if result_instance == None:","        raise KeyError(\"Instance '%s' does not exist in Instance Table\" %body['instanceId'])","    ","    if body['testData']=='true':","        td=1","    else:","        td=0","    fetch_date = datetime.strptime(body['fetchTime'],\"%d-%m-%Y %H:%M:%S\").strftime(\"%Y-%m-%d %H:%M:%S\")","    today=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")","    with conn.cursor() as cur:","        cur.execute(\"insert into billing.usage(id,usage_type_id,instance_id,amount,fetch_time,test_data,date_created) values(%s, %s, %s, %s, %s, %s, %s)\",(body['id'],body['usageTypeId'],body['instanceId'],body['amount'],fetch_date,td,today))","    conn.commit()","    with conn.cursor() as cur:","        sql =\"select * from billing.usage where id='%s'\"","        cur.execute(sql %body['id'])","        result=cur.fetchone()","        print(result)","    conn.commit() ","    # TODO implement","    return {","        'statusCode': 201,","        'body': json.dumps('Successful! Payload with ID:'+ body['id']+' has been pushed to the Database')","    }",""],"id":1}],[{"start":{"row":65,"column":3},"end":{"row":100,"column":5},"action":"remove","lines":[" body=eval(event['body'])","    ","    required_fields = [\"id\",\"usageTypeId\",\"instanceId\",\"amount\",\"fetchTime\",\"testData\"]","    for field in required_fields:","        if field not in body:","            raise KeyError(\"%s key is missing from secret JSON\" % field)","        ","    with conn.cursor() as cur:","        sql =\"select * from billing.instance where id='%s'\"","        cur.execute(sql %body['instanceId'])","        result_instance=cur.fetchone()","        print(result_instance)","    conn.commit()","    if result_instance == None:","        raise KeyError(\"Instance '%s' does not exist in Instance Table\" %body['instanceId'])","    ","    if body['testData']=='true':","        td=1","    else:","        td=0","    fetch_date = datetime.strptime(body['fetchTime'],\"%d-%m-%Y %H:%M:%S\").strftime(\"%Y-%m-%d %H:%M:%S\")","    today=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")","    with conn.cursor() as cur:","        cur.execute(\"insert into billing.usage(id,usage_type_id,instance_id,amount,fetch_time,test_data,date_created) values(%s, %s, %s, %s, %s, %s, %s)\",(body['id'],body['usageTypeId'],body['instanceId'],body['amount'],fetch_date,td,today))","    conn.commit()","    with conn.cursor() as cur:","        sql =\"select * from billing.usage where id='%s'\"","        cur.execute(sql %body['id'])","        result=cur.fetchone()","        print(result)","    conn.commit() ","    # TODO implement","    return {","        'statusCode': 201,","        'body': json.dumps('Successful! Payload with ID:'+ body['id']+' has been pushed to the Database')","    }"],"id":2},{"start":{"row":65,"column":2},"end":{"row":65,"column":3},"action":"remove","lines":[" "]},{"start":{"row":65,"column":1},"end":{"row":65,"column":2},"action":"remove","lines":[" "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"remove","lines":[" "]}],[{"start":{"row":9,"column":0},"end":{"row":63,"column":66},"action":"remove","lines":["","","","def get_secret():","    get_secret_value_response=dict","    secret_name = os.environ['SECRETS_DB']","    region_name = \"us-east-1\"","","    # Create a Secrets Manager client","    session = boto3.session.Session()","    client = session.client(","        service_name='secretsmanager',","        region_name=region_name,","        endpoint_url='https://secretsmanager.us-east-1.amazonaws.com'","    )","    try:","        get_secret_value_response = client.get_secret_value(SecretId=secret_name)","    except ClientError as e:","        if e.response['Error']['Code'] == 'DecryptionFailureException':","            raise e","        elif e.response['Error']['Code'] == 'InternalServiceErrorException':","            raise e","        elif e.response['Error']['Code'] == 'InvalidParameterException':","            raise e","        elif e.response['Error']['Code'] == 'InvalidRequestException':","            raise e","        elif e.response['Error']['Code'] == 'ResourceNotFoundException':","            raise e","    '''else:","        if 'SecretString' in get_secret_value_response:","            secret = get_secret_value_response['SecretString']","        else:","            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])'''","    return(get_secret_value_response)       ","            ","","secret_1=get_secret()","print(secret_1[\"SecretString\"])","cred=dict(eval(secret_1['SecretString']))","rds_host  = cred[\"host\"]","name = cred[\"username\"]","password = cred[\"password\"]","","","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","try:","    conn = pymysql.connect(host=rds_host,user=name,password=password,database=None)","except pymysql.MySQLError as e:","    logger.error(\"ERROR: Unexpected error: Could not connect to MySQL instance.\")","    logger.error(e)","    sys.exit()","    ","logger.info(\"SUCCESS: Connection to RDS MySQL instance succeeded\")"],"id":3}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":43},"action":"remove","lines":["import base64","from botocore.exceptions import ClientError"],"id":4}],[{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"remove","lines":["",""],"id":5}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":4},"action":"insert","lines":["    "],"id":6}],[{"start":{"row":10,"column":4},"end":{"row":10,"column":5},"action":"insert","lines":["p"],"id":7},{"start":{"row":10,"column":5},"end":{"row":10,"column":6},"action":"insert","lines":["r"]},{"start":{"row":10,"column":6},"end":{"row":10,"column":7},"action":"insert","lines":["i"]},{"start":{"row":10,"column":7},"end":{"row":10,"column":8},"action":"insert","lines":["n"]},{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":["t"]}],[{"start":{"row":10,"column":9},"end":{"row":10,"column":11},"action":"insert","lines":["()"],"id":8}],[{"start":{"row":10,"column":10},"end":{"row":10,"column":12},"action":"insert","lines":["\"\""],"id":9}],[{"start":{"row":10,"column":11},"end":{"row":10,"column":12},"action":"insert","lines":["H"],"id":10},{"start":{"row":10,"column":12},"end":{"row":10,"column":13},"action":"insert","lines":["i"]},{"start":{"row":10,"column":13},"end":{"row":10,"column":14},"action":"insert","lines":["!"]},{"start":{"row":10,"column":14},"end":{"row":10,"column":15},"action":"insert","lines":["!"]}],[{"start":{"row":10,"column":15},"end":{"row":10,"column":16},"action":"insert","lines":["1"],"id":11}],[{"start":{"row":9,"column":35},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":10,"column":0},"end":{"row":10,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":10,"column":4},"end":{"row":11,"column":15},"action":"insert","lines":["res=requests.get('https://w3schools.com')","print(res.json)"],"id":13}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"insert","lines":["    "],"id":14}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":[" "],"id":15}],[{"start":{"row":6,"column":12},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":16},{"start":{"row":7,"column":0},"end":{"row":7,"column":1},"action":"insert","lines":["i"]},{"start":{"row":7,"column":1},"end":{"row":7,"column":2},"action":"insert","lines":["m"]}],[{"start":{"row":7,"column":2},"end":{"row":7,"column":3},"action":"insert","lines":["p"],"id":17},{"start":{"row":7,"column":3},"end":{"row":7,"column":4},"action":"insert","lines":["o"]},{"start":{"row":7,"column":4},"end":{"row":7,"column":5},"action":"insert","lines":["r"]},{"start":{"row":7,"column":5},"end":{"row":7,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":7,"column":6},"end":{"row":7,"column":7},"action":"insert","lines":[" "],"id":18},{"start":{"row":7,"column":7},"end":{"row":7,"column":8},"action":"insert","lines":["r"]},{"start":{"row":7,"column":8},"end":{"row":7,"column":9},"action":"insert","lines":["e"]},{"start":{"row":7,"column":9},"end":{"row":7,"column":10},"action":"insert","lines":["q"]}],[{"start":{"row":7,"column":10},"end":{"row":7,"column":11},"action":"insert","lines":["u"],"id":19},{"start":{"row":7,"column":11},"end":{"row":7,"column":12},"action":"insert","lines":["e"]},{"start":{"row":7,"column":12},"end":{"row":7,"column":13},"action":"insert","lines":["s"]},{"start":{"row":7,"column":13},"end":{"row":7,"column":14},"action":"insert","lines":["t"]},{"start":{"row":7,"column":14},"end":{"row":7,"column":15},"action":"insert","lines":["s"]}],[{"start":{"row":12,"column":19},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":20},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":13,"column":4},"end":{"row":13,"column":83},"action":"insert","lines":["conn = pymysql.connect(host=rds_host,user=name,password=password,database=None)"],"id":21}],[{"start":{"row":13,"column":40},"end":{"row":13,"column":41},"action":"insert","lines":["\""],"id":22}],[{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"insert","lines":["\""],"id":23}],[{"start":{"row":13,"column":48},"end":{"row":13,"column":49},"action":"insert","lines":["\""],"id":24}],[{"start":{"row":13,"column":53},"end":{"row":13,"column":54},"action":"insert","lines":["\""],"id":25}],[{"start":{"row":13,"column":64},"end":{"row":13,"column":65},"action":"insert","lines":["\""],"id":26}],[{"start":{"row":13,"column":87},"end":{"row":13,"column":88},"action":"insert","lines":["\""],"id":27}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":14,"column":18},"end":{"row":14,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1590410190812,"hash":"834cd0aecd5c4015ea0b4c2c38578ea1d6af8220"}